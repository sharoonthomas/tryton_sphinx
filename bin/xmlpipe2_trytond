#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
    xmlpipe builder for streaming trytond records for indexing

    :copyright: (c) 2011 by Douglas Morato
    :license: BSD, see LICENSE for more details.
"""
import os
import sys
from optparse import OptionParser

from trytond.config import CONFIG
from trytond.modules import register_classes
from trytond.pool import Pool
from trytond.transaction import Transaction


class UnbufferedUTF8(object):
    """
    A stream with the following chars:

    1. Unbuffered
    2. Encodes as UTF-8
    3. Streams to STDOUT
    """
    def __init__(self):
        self.stream = os.fdopen(sys.stdout.fileno(), 'w', 0)

    def write(self, data):
        try:
            encoded_data = data.encode('utf-8')
        except Exception, exc:
            sys.stderr.write(unicode(exc))
        else:
            self.stream.write(encoded_data)

    def __getattr__(self, attribute):
        return getattr(self.stream, attribute)


if __name__ == '__main__':
    usage = "usage: %prog [options] database user model"
    parser = OptionParser(usage=usage)
    parser.add_option('-c', '--config', dest="config",
        default=None, help="The tryton configuration file to use")
    parser.add_option('-l', '--language', dest="language",
        default=None, help="The langauge for indexing")
    (options, args) = parser.parse_args()

    if len(args) != 3:
        parser.error("Expected 3 argument got %d" % len(args))

    if options.config:
        CONFIG.configfile = options.config
        CONFIG.load()

    register_classes()
    pool = Pool(args[0])
    pool.init()

    with Transaction().start(args[0], 0, None):
        user_obj = pool.get('res.user')
        search_model_obj = pool.get('search.model')

        user_id, = user_obj.search([('login', '=', args[1])])
        with Transaction().set_user(user_id):
            # Load the context of the user so that language and company 
            # settings are automatically available
            context = user_obj.get_preferences(True)

    if options.language:
        # If a language is defined override the user preferred 
        context['language'] = options.language

    with Transaction().start(args[0], user_id, context):
        indexed_model, = search_model_obj.search(
                [('model.model', '=', args[2])])
        search_model_obj.stream_xml(indexed_model, UnbufferedUTF8())
